import os
import elemento
import movimiento as mv


def limpiar_pantalla():
    os.system('cls' if os.name == 'nt' else 'clear')

# 1 imprimir el tablero
def imprimir_tablero(tablero):
    limpiar_pantalla()
    print('      ', end='')
    for i in range(len(tablero[0])):
        print(i + 1, end='   ')
    print()

    for i, fila in enumerate(tablero):
        print(f'{i + 1} - | ', end='')
        for columna in fila:
            print(f'{columna} | ', end='')
        print(f'- {i + 1}')

    print('      ', end='')
    for i in range(len(tablero[0])):
        print(i + 1, end='   ')
    print()

# 2 buscar la posici√≥n del jugador
def buscar_jugador(tablero):
    for i, fila in enumerate(tablero):
        for j, columna in enumerate(fila):
            if columna == elemento.JUGADOR:
                return i, j
    return -1, -1


def mover_jugador(tablero, direccion):
        fila, columna =buscar_jugador(tablero)
        fila_obj, columna_obj = fila, columna # asignacion multiple fila y columna objetivo


        if direccion == mv.ARRIBA:
            fila_obj -= 1 # fila = fila  - 1
        elif direccion == mv.ABAJO:
            fila_obj += 1 # fila = fila  + 1
        elif direccion == mv.IZQUIERDA:
            columna_obj -= 1 #columna = columna  - 1
        elif direccion == mv.DERECHA:
            columna_obj += 1 #columna = columna  + 1
        else:
            print('No se reconoce la direccion')

        if fila_obj < 0 or columna_obj < 0 or \
            fila_obj >= len(tablero) or columna_obj >= len(tablero[0]):
            print('Movimiento no valido')
            return

        if tablero[fila_obj][columna_obj] == elemento.ESP_VAC:
            tablero[fila][columna] = elemento.ESP_VAC
            tablero[fila_obj][columna_obj] = elemento.JUGADOR
        
        elif tablero[fila_obj][columna_obj] == elemento.DESTINO:
            tablero[fila][columna] = elemento.ESP_VAC
            tablero[fila_obj][columna_obj] = elemento.JUG_DEST
            
        else:
                print('Movimiento no valido')

def mover_caja(caja, direccion):
        fila, columna =buscar_jugador(tablero)
        fila_obj, columna_obj = fila, columna # asignacion multiple fila y columna objetivo


        if direccion == mv.ARRIBA:
            fila_obj -= 1 # fila = fila  - 1
        elif direccion == mv.ABAJO:
            fila_obj += 1 # fila = fila  + 1
        elif direccion == mv.IZQUIERDA:
            columna_obj -= 1 #columna = columna  - 1
        elif direccion == mv.DERECHA:
            columna_obj += 1 #columna = columna  + 1
        else:
            print('No se reconoce la direccion')

        if fila_obj < 0 or columna_obj < 0 or \
            fila_obj >= len(tablero) or columna_obj >= len(tablero[0]):
            print('Movimiento no valido')
            return

        if tablero[fila_obj][columna_obj] == elemento.CAJA:
            tablero[fila][columna] = elemento.CAJA
            tablero[fila_obj][columna_obj] = elemento.CAJA.DEST

        else:
                print('Movimiento no valido')

def leer_direccion():

    direccion = input('Ingrese el movimiento (W/A/S/D) o X para salir : ')
    direccion = direccion.upper()
    if direccion == 'W':
        return mv.ARRIBA
    elif direccion == 'A':
        return mv.IZQUIERDA
    elif direccion == 'S':
        return mv.ABAJO
    elif direccion == 'D':
        return mv.DERECHA
    elif direccion == 'X':
        return mv.EXIT
    else:
        return leer_direccion()


def win(tablero):
    victoria = True

    for fila in tablero:
        for columna in fila:
            if columna == elemento.DESTINO:
                victoria = False
                break

    return victoria



def juego():
    tab = elemento.tablero
    imprimir_tablero(tab)
    direccion = leer_direccion()

    while direccion != mv.EXIT and not win(tab):
        mover_jugador(tab, direccion)
        imprimir_tablero(tab)
        direccion = leer_direccion()

    print('Gracias por jugar')

juego()
